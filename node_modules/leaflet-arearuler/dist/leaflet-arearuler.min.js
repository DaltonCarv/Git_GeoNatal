var t = {
    n: e => {
        var i = e && e.__esModule ? () => e.default : () => e;
        return t.d(i, { a: i }), i
    },
    d: (e, i) => {
        for (var o in i) t.o(i, o) && !t.o(e, o) && Object.defineProperty(e, o, { enumerable: !0, get: i[o] })
    },
    o: (t, e) => Object.prototype.hasOwnProperty.call(t, e)
};

const e = window.L;
var i = t.n(e);

window["L.Draw"], i().GeometryUtil.Custom = i().extend(i().GeometryUtil, {
    readableArea(t, e, o) {
        return o = i().Util.extend({}, { km: 2, ha: 2, m: 0, alq: 2 }, o), {
            m: this.formattedNumber(t, o.m, "m²"),
            ha: this.formattedNumber(1e-4 * t, o.ha, "ha"),
            alq: this.formattedNumber(41322e-9 * t, o.alq, "alq (SP)"),
            km: this.formattedNumber(1e-6 * t, o.km, "km²")
        }[e] || 0
    }
});

i().Polygon.Measure = i().Draw.Polygon.extend({
    addHooks() {
        i().Draw.Polygon.prototype.addHooks.call(this), i().Util.setOptions(this, {
            label: { m: "m²", ha: "ha", alq: "Alqueire paulista", km: "km²" }
        });

        this._map && (this._markerGroup = new (i().LayerGroup), this._lastMeasure = new (i().FeatureGroup), this._map.addLayer(this._markerGroup).addLayer(this._lastMeasure), this._markers = [], this._map.on("click", this._onClick, this), this._startShape())
    },
    removeHooks() {
        i().Draw.Polygon.prototype.removeHooks.call(this), this._map.removeLayer(this._lastMeasure), this._clearHideErrorTimeout(), this._map.off("pointermove", this._onMouseMove, this).off("mousemove", this._onMouseMove, this).off("click", this._onClick, this), this._clearGuides(), this._container.style.cursor = "", this._removeShape()
    },
    setOptions(t) {
        this.options = i().Util.extend(this.options, t)
    },
    _startShape() {
        this._drawing = !0, this._poly = new (i().Polyline)([], this.options.shapeOptions), this._poly._onClick = () => { }, this._updateTooltip(), this._map.on("pointermove", this._onMouseMove, this).on("mousemove", this._onMouseMove, this)
    },
    _updateGuide() { },
    _finishShape() {
        let t = this._poly._defaultShape ? this._poly._defaultShape() : this._poly.getLatLngs(),
            e = this._poly.newLatLngIntersects(t[t.length - 1]);
        if (!this.options.allowIntersection && e || !this._shapeIsValid()) return void this._showErrorTooltip();
        let o = new this.Poly(this._poly.getLatLngs(), this.options.shapeOptions);
        this._lastMeasure.addLayer(o);
        // Remover o trecho que cria e abre o popup
        // o.bindPopup(`<p>${i().GeometryUtil.Custom.readableArea(this._area, this.options.unity, {})} ${this.options.label[this.options.unity]}</p>`).openPopup();
        this._map.off("pointermove", this._onMouseMove, this).off("mousemove", this._onMouseMove, this);
        this._drawing = !1;
        this._cleanUpShape();
        this._clearGuides();
        this._updateTooltip();
        this._container.style.cursor = "";
    },
    _removeShape() {
        this._poly && (this._map.removeLayer(this._poly), this._lastMeasure.clearLayers(), delete this._poly, this._markers.splice(0), this._markerGroup.clearLayers())
    },
    _onClick(t) {
        this._drawing || (this._removeShape(), this._startShape(), this._map.fire("arearuler:newmeasure"))
    },
    _vertexChanged(t, e) {
        this._area = i().GeometryUtil.geodesicArea(this._poly.getLatLngs()), this._map.fire("arearuler:newarea", { original: { area: this._area, unity: "m" }, converted: { area: parseFloat(i().GeometryUtil.Custom.readableArea(this._area, this.options.unity, {})), unity: this.options.label[this.options.unity] } }), this._updateFinishHandler(), this._updateRunningMeasure(t, e), this._clearGuides(), this._updateTooltip()
    },
    _getTooltipText() {
        let t, e;
    
        if (this._markers.length > 2) {
            const areaM2 = this._area;
            const areaHa = areaM2 * 0.0001; // Conversão de m² para ha
            const areaKm2 = areaM2 * 0.000001; // Conversão de m² para km²
    
            e = `<br> ${areaM2.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} m² <br> ${areaKm2.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} km² <br> ${areaHa.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} ha`;
        }
    
        t = (this._markers.length === 0) ? i().drawLocal.draw.handlers.polygon.tooltip.start : (this._markers.length < 3) ? i().drawLocal.draw.handlers.polygon.tooltip.cont : i().drawLocal.draw.handlers.polygon.tooltip.end;
    
        if (!this._drawing) {
            t = "";
        }
    
        return { text: t, subtext: e };
    }
});

i().Control.AreaRuler = i().Control.extend({
    options: {
        position: "topleft",
        unity: "ha",
        shapeOptions: { color: "#d07f03", stroke: !0, weight: 4, opacity: .7, fill: !0, clickable: !0 },
        icon: new (i().DivIcon)({ iconSize: new (i().Point)(9, 9), className: "leaflet-div-icon leaflet-editing-icon" }),
        text: { title: "Measure area" }
    },
    initialize(t) {
        (t = t || {}).text = i().Util.extend(this.options.text, t.text), i().Util.setOptions(this, t)
    },
    onRemove() {
        this.options.button && i().DomEvent.off(this.options.button, "click", this.toggle, this)
    },
    enabled() { return this._handler.enabled() },
    toggle() {
        this._handler.enabled() ? (this._map.fire("arearuler:measurestop"), this._handler.disable.call(this._handler)) : (this._map.fire("arearuler:measurestart"), this._handler.enable.call(this._handler))
    },
    setOptions(t) { this._handler.setOptions(t) },
    onAdd(t) {
        if (this._handler = new (i().Polygon.Measure)(t, this.options), this.options.button) return i().DomEvent.on(this.options.button, "click", this.toggle, this), i().DomUtil.create("div", "leaflet-bar");
        let e = null;
        return this._container = i().DomUtil.create("div", "leaflet-bar"), this._handler.on("enabled", (() => { i().DomUtil.addClass(this._container, "enabled") }), this), this._handler.on("disabled", (() => { i().DomUtil.removeClass(this._container, "enabled") }), this), e = i().DomUtil.create("a", "leaflet-control-draw-area-ruler", this._container), e.href = "#", e.title = this.options.text.title, i().DomEvent.addListener(e, "click", i().DomEvent.stopPropagation).addListener(e, "click", i().DomEvent.preventDefault).addListener(e, "click", this.toggle, this), this._container
    }
});

i().Map.mergeOptions({ areaRulerControl: !1 });

i().Map.addInitHook((function () {
    this.options.areaRulerControl && (this.areaRulerControl = i().Control.arearuler().addTo(this))
}));

i().Control.arearuler = t => new (i().Control.AreaRuler)(t);
